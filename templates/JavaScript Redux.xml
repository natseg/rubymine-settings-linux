<templateSet group="JavaScript Redux">
  <template name="rac" value="'use strict';&#10;&#10;import _ from 'lodash';&#10;import fetch from 'isomorphic-fetch';&#10;&#10;import { BASE_URL, ENDPOINTS } from '../../constants/WebserviceConstants';&#10;&#10;import {&#10;  FETCH_$constPlural$,&#10;  FETCH_$constSing$,&#10;  &#10;  SELECT_$constSing$,&#10;  SELECT_ANOTHER_$constSing$,&#10;  DESELECT_$constSing$,&#10;  &#10;  NEW_$constSing$,&#10;  CREATE_$constSing$,&#10;  EDIT_$constSing$,&#10;  UPDATE_$constSing$,&#10;  DESTROY_$constSing$&#10;} from '../actions/$actions$Actions';&#10;&#10;import {&#10;  FETCHING, EDITING, CREATING, UPDATING, DELETING, SUCCESS, FAILURE, DESTROY_FAILURE&#10;} from '../../constants/DataStatuses';&#10;&#10;import { FULL } from '../../constants/DataFormats';&#10;import { SERVER } from '../../constants/ErrorTypes';&#10;import { API_ERROR } from '../../constants/ErrorTypes';&#10;import DefaultIndex from '../../constants/DefaultIndex';&#10;&#10;function restfulUrl(identifier = '') {&#10;  return `${BASE_URL}${$ENDPOINT$}/${identifier}`;&#10;}&#10;&#10;/*&#10;  fetch$resourcePluralCap$&#10; */&#10;&#10;function fetch$resourcePluralCap$() {&#10;  return dispatch =&gt; {&#10;    dispatch(request$resourcePluralCap$());&#10;&#10;    return fetch(restfulUrl(), {&#10;      headers: {&#10;        'Accept': 'application/json',&#10;        'Content-Type': 'application/json'&#10;      }&#10;    }).then((response) =&gt; {&#10;&#10;      if (response.status &lt; 400) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(receive$resourcePluralCap$(json));&#10;        });&#10;&#10;      } else if (response.status &lt; 500) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(handle$resourcePluralCap$Failure({&#10;            type: SERVER,&#10;            status: response.status,&#10;            ...json&#10;          }));&#10;        });&#10;&#10;      } else {&#10;&#10;        return dispatch(handle$resourcePluralCap$Failure({&#10;          type: SERVER,&#10;          status: response.status,&#10;          message: response.body&#10;        }));&#10;&#10;      }&#10;&#10;    });&#10;  };&#10;}&#10;&#10;function request$resourcePluralCap$() {&#10;  return {&#10;    type: FETCH_$constPlural$,&#10;    status: FETCHING,&#10;    items: { }, indexes: []&#10;  };&#10;}&#10;&#10;function receive$resourcePluralCap$($resourcePlural$) {&#10;&#10;  const items = _.reduce($resourcePlural$, (memo, $itemAttr$) =&gt; {&#10;    const { $identifier$ } = $itemAttr$;&#10;    &#10;    memo[$identifier$] = {&#10;      $itemAttr$,&#10;      dataStatus: { status: SUCCESS },&#10;      dataFormat: FULL&#10;    };&#10;      &#10;    return memo;&#10;  }, {});&#10;  &#10;  const selectedIdentifiers = function(){&#10;    if (_.size($resourcePlural$) &gt; 0) {&#10;      return { [_.first($resourcePlural$).$identifier$]: true };&#10;    } else {&#10;      return { };&#10;    }&#10;  }();&#10;  &#10;  return {&#10;    type: FETCH_$constPlural$,&#10;    status: SUCCESS,&#10;    items,&#10;    indexes: _.map($resourcePlural$, '$identifier$'),&#10;    selectedIdentifiers &#10;  };&#10;  &#10;}&#10;&#10;function handle$resourcePluralCap$Failure(error) {&#10;  return {&#10;    type: FETCH_$constPlural$,&#10;    status: FAILURE,&#10;    error&#10;  };&#10;}&#10;&#10;/*&#10;  fetch$resourceSingCap$&#10; */&#10;&#10;&#10;function fetch$resourceSingCap$(identifier, options = {}) {&#10;  return dispatch =&gt; {&#10;    dispatch(request$resourceSingCap$(identifier));&#10;&#10;    return fetch(restfulUrl(identifier), {&#10;      headers: {&#10;        'Accept': 'application/json',&#10;        'Content-Type': 'application/json'&#10;      }&#10;    }).then((response) =&gt; {&#10;      const { status } = response; &#10;      &#10;      if (status &lt; 400) {&#10;        &#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(receive$resourceSingCap$(identifier, json));&#10;        });&#10;&#10;      } else {&#10;&#10;        const { raiseHttpErrors } = options;&#10;        &#10;        if (raiseHttpErrors &amp;&amp; raiseHttpErrors[status]) {&#10;          &#10;          throw {&#10;            name: API_ERROR,&#10;            action: raiseHttpErrors[status],&#10;            status&#10;          }; &#10;           &#10;        } else {&#10;        &#10;          if (status &lt; 500) {&#10;&#10;            return response.json().then((json)=&gt; {&#10;              return dispatch(handle$resourceSingCap$Failure(identifier, {&#10;                type: SERVER,&#10;                status,&#10;                ...json&#10;              }));&#10;            });&#10;            &#10;          } else {&#10;&#10;            return dispatch(handle$resourceSingCap$Failure(identifier, {&#10;              type: SERVER,&#10;              status: response.status,&#10;              message: response.body&#10;            }));&#10;    &#10;          }&#10;        }&#10;        &#10;      }&#10;&#10;    });&#10;  };&#10;}&#10;&#10;function request$resourceSingCap$(identifier) {&#10;  return {&#10;    type: FETCH_$constSing$,&#10;    status: FETCHING,&#10;    identifier,&#10;    item: {&#10;      $itemAttr$: { },&#10;      dataFormat: FULL,&#10;      dataStatus: { status: FETCHING }&#10;    }&#10;  };&#10;}&#10;&#10;function receive$resourceSingCap$(identifier, $itemAttr$) {&#10;&#10;  return {&#10;    type: FETCH_$constSing$,&#10;    status: SUCCESS,&#10;    identifier,&#10;    item: {&#10;      $itemAttr$,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: SUCCESS }&#10;    }&#10;  };&#10;}&#10;&#10;function handle$resourceSingCap$Failure(identifier, error) {&#10;  return {&#10;    type: FETCH_$constSing$,&#10;    status: FAILURE,&#10;    identifier,&#10;    error&#10;  };&#10;}&#10;&#10;/*&#10; * select$resourceSingCap$&#10; */&#10;&#10;function select$resourceSingCap$(identifier) {&#10;  return {&#10;    type: SELECT_$constSing$,&#10;    identifier&#10;  };&#10;}&#10;&#10;/*&#10; * selectAnother$resourceSingCap$&#10; */&#10;&#10;function selectAnother$resourceSingCap$(identifier) {&#10;  return {&#10;    type: SELECT_ANOTHER_$constSing$,&#10;    identifier&#10;  };&#10;}&#10;&#10;/*&#10; * deselect$resourceSingCap$&#10; */&#10;&#10;function deselect$resourceSingCap$(identifier) {&#10;  return {&#10;    type: DESELECT_$constSing$,&#10;    identifier&#10;  };&#10;}&#10;&#10;/*&#10;  new$resourceSingCap$&#10; */&#10;&#10;function new$resourceSingCap$(attributes = {}, temporaryId = DefaultIndex) {&#10;  return addNew$resourceSingCap$(temporaryId, attributes);&#10;}&#10;&#10;function addNew$resourceSingCap$(temporaryId, attributes) {&#10;  return {&#10;    type: NEW_$constSing$,&#10;    status: EDITING,&#10;    temporaryId,&#10;    item: {&#10;      $itemAttr$: attributes,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: EDITING }&#10;    }&#10;  };&#10;}&#10;&#10;/*&#10;  edit$resourceSingCap$&#10; */&#10;&#10;function edit$resourceSingCap$(identifier, attributes) {&#10;  return editExisting$resourceSingCap$(identifier, attributes);&#10;}&#10;&#10;function editExisting$resourceSingCap$(identifier, attributes) {&#10;  return {&#10;    type: EDIT_$constSing$,&#10;    status: EDITING,&#10;    identifier,&#10;    item: {&#10;      $itemAttr$: attributes,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: EDITING }&#10;    }&#10;  };&#10;}&#10;&#10;/*&#10;  create$resourceSingCap$&#10;*/&#10;&#10;function create$resourceSingCap$($resourceSing$, temporaryId = DefaultIndex) {&#10;  return dispatch =&gt; {&#10;    dispatch(submitCreate$resourceSingCap$(temporaryId, $resourceSing$));&#10;&#10;    return fetch(restfulUrl(), {&#10;      method: 'POST',&#10;      credentials: 'include',&#10;      body: JSON.stringify($resourceSing$),&#10;      headers: {&#10;        'Accept': 'application/json',&#10;        'Content-Type': 'application/json'&#10;      }&#10;    }).then((response) =&gt; {&#10;&#10;      if (response.status &lt; 400) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(receiveCreated$resourceSingCap$(temporaryId, json));&#10;        });&#10;&#10;      } else if (response.status &lt; 500) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(handleCreate$resourceSingCap$Failure(temporaryId, {&#10;            type: SERVER,&#10;            status: response.status,&#10;            ...json&#10;          }));&#10;        });&#10;&#10;      } else {&#10;&#10;        return dispatch(handleCreate$resourceSingCap$Failure(temporaryId, {&#10;          type: SERVER,&#10;          status: response.status,&#10;          message: response.body&#10;        }));&#10;&#10;      }&#10;&#10;    });&#10;  };&#10;}&#10;&#10;function submitCreate$resourceSingCap$(temporaryId, $itemAttr$) {&#10;  return {&#10;    type: CREATE_$constSing$,&#10;    status: CREATING,&#10;    temporaryId,&#10;    item: {&#10;      $itemAttr$,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: CREATING }&#10;    }&#10;  };&#10;}&#10;&#10;function receiveCreated$resourceSingCap$(temporaryId, $itemAttr$) {&#10;  const { $identifier$: identifier } = $itemAttr$;&#10;&#10;  return {&#10;    type: CREATE_$constSing$,&#10;    status: SUCCESS,&#10;    identifier, temporaryId,&#10;    item: {&#10;      $itemAttr$,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: SUCCESS }&#10;    }&#10;  };&#10;}&#10;&#10;function handleCreate$resourceSingCap$Failure(temporaryId, error) {&#10;  return {&#10;    type: CREATE_$constSing$,&#10;    status: FAILURE,&#10;    temporaryId,&#10;    error&#10;  };&#10;}&#10;&#10;/*&#10;  update$resourceSingCap$&#10;*/&#10;&#10;function update$resourceSingCap$(identifier, $resourceSing$) {&#10;  return dispatch =&gt; {&#10;    dispatch(submitUpdate$resourceSingCap$(identifier, $resourceSing$));&#10;&#10;    return fetch(restfulUrl(identifier), {&#10;      method: 'PUT',&#10;      credentials: 'include',&#10;      body: JSON.stringify($resourceSing$),&#10;      headers: {&#10;        'Accept': 'application/json',&#10;        'Content-Type': 'application/json'&#10;      }&#10;    }).then((response) =&gt; {&#10;&#10;      if (response.status &lt; 400) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(receiveUpdated$resourceSingCap$(identifier, json));&#10;        });&#10;&#10;      } else if (response.status &lt; 500) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(handleUpdate$resourceSingCap$Failure(identifier, {&#10;            type: SERVER,&#10;            status: response.status,&#10;            ...json&#10;          }));&#10;        });&#10;&#10;      } else {&#10;&#10;        return dispatch(handleUpdate$resourceSingCap$Failure(identifier, {&#10;          type: SERVER,&#10;          status: response.status,&#10;          message: response.body&#10;        }));&#10;&#10;      }&#10;&#10;    });&#10;  };&#10;}&#10;&#10;function submitUpdate$resourceSingCap$(identifier, $itemAttr$) {&#10;  return {&#10;    type: UPDATE_$constSing$,&#10;    status: UPDATING,&#10;    identifier,&#10;    item: {&#10;      $itemAttr$,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: UPDATING }&#10;    }&#10;  };&#10;}&#10;&#10;function receiveUpdated$resourceSingCap$(identifier, $itemAttr$) {&#10;  return {&#10;    type: UPDATE_$constSing$,&#10;    status: SUCCESS,&#10;    identifier,&#10;    item: {&#10;      $itemAttr$,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: SUCCESS }&#10;    }&#10;  };&#10;}&#10;&#10;function handleUpdate$resourceSingCap$Failure(identifier, error) {&#10;  return {&#10;    type: UPDATE_$constSing$,&#10;    status: FAILURE,&#10;    identifier, error&#10;  };&#10;}&#10;&#10;&#10;/*&#10;  destroy$resourceSingCap$&#10; */&#10; &#10; function destroy$resourceSingCap$(identifier, item) {&#10;  return dispatch =&gt; {&#10;    dispatch(delete$resourceSingCap$Update(identifier));&#10;&#10;    return fetch(restfulUrl(identifier), {&#10;      method: 'delete',&#10;      credentials: 'include',&#10;      headers: {&#10;        'Accept': 'application/json',&#10;        'Content-Type': 'application/json'&#10;      }&#10;    }).then((response) =&gt; {&#10;&#10;      if (response.status &lt; 400) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(remove$resourceSingCap$(identifier, json));&#10;        });&#10;&#10;      } else if (response.status &lt; 500) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(handleDestroy$resourceSingCap$Failure(identifier, item, {&#10;            type: SERVER,&#10;            status: response.status,&#10;            ...json&#10;          }));&#10;        });&#10;&#10;      } else {&#10;&#10;        return dispatch(handleDestroy$resourceSingCap$Failure(identifier, item, {&#10;          type: SERVER,&#10;          status: response.status,&#10;          message: response.body&#10;        }));&#10;&#10;      }&#10;&#10;    });&#10;  };&#10;}&#10;&#10;function delete$resourceSingCap$Update(identifier) {&#10;  return {&#10;    type: DESTROY_$constSing$,&#10;    status: DELETING,&#10;    identifier&#10;  };&#10;}&#10;&#10;function remove$resourceSingCap$(identifier) {&#10;  return {&#10;    type: DESTROY_$constSing$,&#10;    status: SUCCESS,&#10;    identifier&#10;  };&#10;}&#10;&#10;function handleDestroy$resourceSingCap$Failure(identifier, $itemAttr$, error) {&#10;  return {&#10;    type: DESTROY_$constSing$,&#10;    status: DESTROY_FAILURE,&#10;    identifier, item: {&#10;      $itemAttr$,&#10;      dataStatus: { status: DESTROY_FAILURE },&#10;      error&#10;    }&#10;  };&#10;}&#10;&#10;export {&#10;  fetch$resourcePluralCap$,&#10;  fetch$resourceSingCap$,&#10;&#10;  select$resourceSingCap$,&#10;  selectAnother$resourceSingCap$,&#10;  deselect$resourceSingCap$,&#10;  &#10;  new$resourceSingCap$,&#10;  create$resourceSingCap$,&#10;  edit$resourceSingCap$,&#10;  update$resourceSingCap$,&#10;  destroy$resourceSingCap$&#10;};&#10;" description="redux action creators" toReformat="false" toShortenFQNames="true">
    <variable name="resourcePluralCap" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="resourcePlural" expression="decapitalize(resourcePluralCap)" defaultValue="" alwaysStopAt="false" />
    <variable name="actions" expression="resourcePluralCap" defaultValue="" alwaysStopAt="false" />
    <variable name="constPlural" expression="capitalizeAndUnderscore(resourcePluralCap)" defaultValue="" alwaysStopAt="false" />
    <variable name="resourceSing" expression="resourcePlural" defaultValue="" alwaysStopAt="true" />
    <variable name="resourceSingCap" expression="capitalize(resourceSing)" defaultValue="" alwaysStopAt="false" />
    <variable name="constSing" expression="capitalizeAndUnderscore(resourceSing)" defaultValue="" alwaysStopAt="false" />
    <variable name="itemAttr" expression="resourceSing" defaultValue="" alwaysStopAt="true" />
    <variable name="identifier" expression="" defaultValue="&quot;id&quot;" alwaysStopAt="true" />
    <variable name="ENDPOINT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rc" value="import { connect } from 'react-redux';&#10;&#10;import $WRAPPED2$ from './$WRAPPED$';&#10;&#10;function mapStateToProps({ $STATE$ }, ownProps){&#10;&#10;  return {&#10;  &#10;  };&#10;}&#10;&#10;function mapDispatchToProps(dispatch) {&#10;  return {&#10;    &#10;  };&#10;}&#10;&#10;const $WRAPPED$Container = connect(&#10;    mapStateToProps,&#10;    mapDispatchToProps&#10;)($WRAPPED$);&#10;&#10;export default $WRAPPED$Container;&#10;" description="Redux Container" toReformat="false" toShortenFQNames="true">
    <variable name="WRAPPED" expression="firstWord(spaceSeparated(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="WRAPPED2" expression="WRAPPED" defaultValue="" alwaysStopAt="false" />
    <variable name="STATE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="racn" value="'use strict';&#10;&#10;import _ from 'lodash';&#10;import fetch from 'isomorphic-fetch';&#10;&#10;import { BASE_URL, ENDPOINTS } from '../../constants/WebserviceConstants';&#10;&#10;import {&#10;  FETCH_$constPlural$,&#10;  FETCH_$constSing$,&#10;  &#10;  SELECT_$constSing$,&#10;  SELECT_ANOTHER_$constSing$,&#10;  DESELECT_$constSing$,&#10;  &#10;  NEW_$constSing$,&#10;  CREATE_$constSing$,&#10;  EDIT_$constSing$,&#10;  UPDATE_$constSing$,&#10;  DESTROY_$constSing$&#10;} from '../actions/$resourcePluralCap$Actions';&#10;&#10;import {&#10;  FETCHING, EDITING, CREATING, UPDATING, DELETING, SUCCESS, FAILURE, DESTROY_FAILURE&#10;} from '../../constants/DataStatuses';&#10;&#10;import { FULL, PREVIEW } from '../../constants/DataFormats';&#10;import { SERVER, CLIENT } from '../../constants/ErrorTypes';&#10;import { API_ERROR } from '../../constants/ErrorTypes';&#10;import DefaultIndex from '../../constants/DefaultIndex';&#10;&#10;function restfulUrl($parentIdentifier$, identifier = '') {&#10;  return `${BASE_URL}${ENDPOINTS.$PARENT_ENDPOINT$}/${$parentIdentifier$}${ENDPOINTS.EXTRAS.$ENDPOINT$}/${identifier}`;&#10;}&#10;&#10;/*&#10;  fetch$resourcePluralCap$&#10; */&#10; &#10; function fetch$resourcePluralCap$($parentIdentifier$) {&#10;  return dispatch =&gt; {&#10;    dispatch(request$resourcePluralCap$($parentIdentifier$));&#10;&#10;    return fetch(restfulUrl($parentIdentifier$), {&#10;      headers: {&#10;        'Accept': 'application/json',&#10;        'Content-Type': 'application/json'&#10;      }&#10;    }).then((response) =&gt; {&#10;&#10;      if (response.status &lt; 400) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(receive$resourcePluralCap$($parentIdentifier$, json));&#10;        });&#10;&#10;      } else if (response.status &lt; 500) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(handle$resourcePluralCap$Failure($parentIdentifier$, {&#10;            type: SERVER,&#10;            status: response.status,&#10;            ...json&#10;          }));&#10;        });&#10;&#10;      } else {&#10;&#10;        return dispatch(handle$resourcePluralCap$Failure($parentIdentifier$, {&#10;          type: SERVER,&#10;          status: response.status,&#10;          message: response.body&#10;        }));&#10;&#10;      }&#10;&#10;    });&#10;  };&#10;}&#10;&#10;function request$resourcePluralCap$($parentIdentifier$) {&#10;  return {&#10;    type: FETCH_$constPlural$,&#10;    status: FETCHING,&#10;    $parentIdentifier$,&#10;    items: { }, indexes: []&#10;  };&#10;}&#10;&#10;function receive$resourcePluralCap$($parentIdentifier$, $resourcePlural$) {&#10;&#10;  const items = _.reduce($resourcePlural$, (memo, $itemAttr$) =&gt; {&#10;    memo[$itemAttr$.$identifier$] = {&#10;      $itemAttr$,&#10;      dataStatus: { status: SUCCESS },&#10;      dataFormat: FULL&#10;    };&#10;    &#10;    return memo;&#10;  }, {});&#10;  &#10;  return {&#10;    type: FETCH_$constPlural$,&#10;    status: SUCCESS,&#10;    $parentIdentifier$, items,&#10;    indexes: _.map($resourcePlural$, '$identifier$'),&#10;    selectedIdentifiers: { } &#10;  };&#10;  &#10;}&#10;&#10;function handle$resourcePluralCap$Failure($parentIdentifier$, error) {&#10;  return {&#10;    type: FETCH_$constPlural$,&#10;    status: FAILURE,&#10;    $parentIdentifier$,&#10;    error&#10;  };&#10;}&#10;&#10;/*&#10;  fetch$resourceSingCap$&#10; */&#10;&#10;function fetch$resourceSingCap$($parentIdentifier$, identifier, options = {}) {&#10;  return dispatch =&gt; {&#10;    dispatch(request$resourceSingCap$($parentIdentifier$, identifier));&#10;&#10;    return fetch(restfulUrl($parentIdentifier$, identifier), {&#10;      headers: {&#10;        'Accept': 'application/json',&#10;        'Content-Type': 'application/json'&#10;      }&#10;    }).then((response) =&gt; {&#10;&#10;      if (response.status &lt; 400) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(receive$resourceSingCap$($parentIdentifier$, identifier, json));&#10;        });&#10;&#10;      } else {&#10;        const { raiseHttpErrors } = options;&#10;        &#10;        if (raiseHttpErrors &amp;&amp; raiseHttpErrors[status]) {&#10;            &#10;            throw {&#10;              name: API_ERROR,&#10;              action: raiseHttpErrors[status],&#10;              status&#10;            }; &#10;             &#10;          } else {&#10;            if (response.status &lt; 500) {&#10;      &#10;              return response.json().then((json)=&gt; {&#10;                return dispatch(handle$resourceSingCap$Failure($parentIdentifier$, identifier, {&#10;                  type: SERVER,&#10;                  status: response.status,&#10;                  ...json&#10;                }));&#10;              });&#10;      &#10;            } else {&#10;      &#10;              return dispatch(handle$resourceSingCap$Failure($parentIdentifier$, identifier, {&#10;                type: SERVER,&#10;                status: response.status,&#10;                message: response.body&#10;              }));&#10;      &#10;            }&#10;          }&#10;      }&#10;      &#10;    });&#10;  };&#10;}&#10;&#10;function request$resourceSingCap$($parentIdentifier$, identifier) {&#10;  return {&#10;    type: FETCH_$constSing$,&#10;    status: FETCHING,&#10;    identifier, $parentIdentifier$,&#10;    item: {&#10;      $itemAttr$: { },&#10;      dataFormat: FULL,&#10;      dataStatus: { status: FETCHING }&#10;    }&#10;  };&#10;}&#10;&#10;function receive$resourceSingCap$($parentIdentifier$, identifier, $itemAttr$) {&#10;&#10;  return {&#10;    type: FETCH_$constSing$,&#10;    status: SUCCESS,&#10;    identifier, $parentIdentifier$,&#10;    item: {&#10;      $itemAttr$,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: SUCCESS }&#10;    }&#10;  };&#10;}&#10;&#10;function handle$resourceSingCap$Failure($parentIdentifier$, identifier, error) {&#10;  return {&#10;    type: FETCH_$constSing$,&#10;    status: FAILURE,&#10;    identifier, $parentIdentifier$,&#10;    error&#10;  };&#10;}&#10;&#10;/*&#10; * select$resourceSingCap$&#10; */&#10;&#10;function select$resourceSingCap$($parentIdentifier$, identifier) {&#10;  return {&#10;    type: SELECT_$constSing$,&#10;    identifier, $parentIdentifier$&#10;  };&#10;}&#10;&#10;/*&#10; * selectAnother$resourceSingCap$&#10; */&#10;&#10;function selectAnother$resourceSingCap$($parentIdentifier$, identifier) {&#10;  return {&#10;    type: SELECT_ANOTHER_$constSing$,&#10;    identifier, $parentIdentifier$&#10;  };&#10;}&#10;&#10;/*&#10; * deselect$resourceSingCap$&#10; */&#10;&#10;function deselect$resourceSingCap$($parentIdentifier$, identifier) {&#10;  return {&#10;    type: DESELECT_$constSing$,&#10;    identifier, $parentIdentifier$&#10;  };&#10;}&#10;&#10;/*&#10;  new$resourceSingCap$&#10; */&#10; &#10; function new$resourceSingCap$($parentIdentifier$, $itemAttr$ = {}, temporaryId = DefaultIndex) {&#10;  return addNew$resourceSingCap$($parentIdentifier$, temporaryId, $itemAttr$);&#10;}&#10;&#10;function addNew$resourceSingCap$($parentIdentifier$, temporaryId, $itemAttr$) {&#10;  return {&#10;    type: NEW_$constSing$,&#10;    status: EDITING,&#10;    temporaryId, $parentIdentifier$,&#10;    item: {&#10;      $itemAttr$,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: EDITING }&#10;    }&#10;  };&#10;}&#10;&#10;/*&#10;  edit$resourceSingCap$&#10; */&#10; &#10; function edit$resourceSingCap$($parentIdentifier$, identifier, attributes) {&#10;  return editExisting$resourceSingCap$($parentIdentifier$, identifier, attributes);&#10;}&#10;&#10;function editExisting$resourceSingCap$($parentIdentifier$, identifier, attributes) {&#10;  return {&#10;    type: EDIT_$constSing$,&#10;    status: EDITING,&#10;    identifier, $parentIdentifier$,&#10;    item: {&#10;      $itemAttr$: attributes,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: EDITING }&#10;    }&#10;  };&#10;}&#10;&#10;/*&#10;  create$resourceSingCap$&#10;*/&#10;&#10;function create$resourceSingCap$($parentIdentifier$, $resourceSing$, temporaryId = DefaultIndex) {&#10;  return dispatch =&gt; {&#10;    dispatch(submitCreate$resourceSingCap$($parentIdentifier$, temporaryId, $resourceSing$));&#10;&#10;    return fetch(restfulUrl($parentIdentifier$), {&#10;      method: 'POST',&#10;      credentials: 'include',&#10;      body: JSON.stringify($resourceSing$),&#10;      headers: {&#10;        'Accept': 'application/json',&#10;        'Content-Type': 'application/json'&#10;      }&#10;    }).then((response) =&gt; {&#10;&#10;      if (response.status &lt; 400) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(receiveCreated$resourceSingCap$($parentIdentifier$, temporaryId, json));&#10;        });&#10;&#10;      } else if (response.status &lt; 500) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(handleCreate$resourceSingCap$Failure($parentIdentifier$, temporaryId, {&#10;            type: SERVER,&#10;            status: response.status,&#10;            ...json&#10;          }));&#10;        });&#10;&#10;      } else {&#10;&#10;        return dispatch(handleCreate$resourceSingCap$Failure($parentIdentifier$, temporaryId, {&#10;          type: SERVER,&#10;          status: response.status,&#10;          message: response.body&#10;        }));&#10;&#10;      }&#10;&#10;    });&#10;  };&#10;}&#10;&#10;function submitCreate$resourceSingCap$($parentIdentifier$, temporaryId, $itemAttr$) {&#10;  return {&#10;    type: CREATE_$constSing$,&#10;    status: CREATING,&#10;    temporaryId, $parentIdentifier$,&#10;    item: {&#10;      $itemAttr$,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: CREATING }&#10;    }&#10;  };&#10;}&#10;&#10;function receiveCreated$resourceSingCap$($parentIdentifier$, temporaryId, $itemAttr$) {&#10;  const { $identifier$: identifier } = $resourceSing$;&#10;&#10;  return {&#10;    type: CREATE_$constSing$,&#10;    status: SUCCESS,&#10;    identifier, temporaryId, $parentIdentifier$,&#10;    item: {&#10;      $itemAttr$,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: SUCCESS }&#10;    }&#10;  };&#10;}&#10;&#10;function handleCreate$resourceSingCap$Failure($parentIdentifier$, temporaryId, error) {&#10;  return {&#10;    type: CREATE_$constSing$,&#10;    status: FAILURE,&#10;    temporaryId, $parentIdentifier$,&#10;    error&#10;  };&#10;}&#10;&#10;/*&#10;  update$resourceSingCap$&#10;*/&#10;&#10;function update$resourceSingCap$($parentIdentifier$, identifier, $resourceSing$) {&#10;  return dispatch =&gt; {&#10;    dispatch(submitUpdate$resourceSingCap$($parentIdentifier$, identifier, $resourceSing$));&#10;&#10;    return fetch(restfulUrl($parentIdentifier$, identifier), {&#10;      method: 'PUT',&#10;      credentials: 'include',&#10;      body: JSON.stringify($resourceSing$),&#10;      headers: {&#10;        'Accept': 'application/json',&#10;        'Content-Type': 'application/json'&#10;      }&#10;    }).then((response) =&gt; {&#10;&#10;      if (response.status &lt; 400) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(receiveUpdated$resourceSingCap$($parentIdentifier$, identifier, json));&#10;        });&#10;&#10;      } else if (response.status &lt; 500) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(handleUpdate$resourceSingCap$Failure($parentIdentifier$, identifier, {&#10;            type: SERVER,&#10;            status: response.status,&#10;            ...json&#10;          }));&#10;        });&#10;&#10;      } else {&#10;&#10;        return dispatch(handleUpdate$resourceSingCap$Failure($parentIdentifier$, identifier, {&#10;          type: SERVER,&#10;          status: response.status,&#10;          message: response.body&#10;        }));&#10;&#10;      }&#10;&#10;    });&#10;  };&#10;}&#10;&#10;function submitUpdate$resourceSingCap$($parentIdentifier$, identifier, $itemAttr$) {&#10;  return {&#10;    type: UPDATE_$constSing$,&#10;    status: UPDATING,&#10;    identifier, $parentIdentifier$,&#10;    item: {&#10;      $itemAttr$,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: UPDATING }&#10;    }&#10;  };&#10;}&#10;&#10;function receiveUpdated$resourceSingCap$($parentIdentifier$, identifier, $itemAttr$) {&#10;  return {&#10;    type: UPDATE_$constSing$,&#10;    status: SUCCESS,&#10;    identifier,&#10;    item: {&#10;      $itemAttr$,&#10;      dataFormat: FULL,&#10;      dataStatus: { status: SUCCESS }&#10;    }&#10;  };&#10;}&#10;&#10;function handleUpdate$resourceSingCap$Failure($parentIdentifier$, identifier, error) {&#10;  return {&#10;    type: UPDATE_$constSing$,&#10;    status: FAILURE,&#10;    identifier, error, $parentIdentifier$&#10;  };&#10;}&#10;&#10;&#10;/*&#10;  destroy$resourceSingCap$&#10; */&#10;&#10;function destroy$resourceSingCap$($parentIdentifier$, identifier, item) {&#10;  return dispatch =&gt; {&#10;    dispatch(delete$resourceSingCap$Update($parentIdentifier$, identifier));&#10;&#10;    return fetch(restfulUrl($parentIdentifier$, identifier), {&#10;      method: 'delete',&#10;      credentials: 'include',&#10;      headers: {&#10;        'Accept': 'application/json',&#10;        'Content-Type': 'application/json'&#10;      }&#10;    }).then((response) =&gt; {&#10;&#10;      if (response.status &lt; 400) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(remove$resourceSingCap$($parentIdentifier$, identifier, json));&#10;        });&#10;&#10;      } else if (response.status &lt; 500) {&#10;&#10;        return response.json().then((json)=&gt; {&#10;          return dispatch(handleDestroy$resourceSingCap$Failure($parentIdentifier$, identifier, item, {&#10;            type: SERVER,&#10;            status: response.status,&#10;            ...json&#10;          }));&#10;        });&#10;&#10;      } else {&#10;&#10;        return dispatch(handleDestroy$resourceSingCap$Failure($parentIdentifier$, identifier, item, {&#10;          type: SERVER,&#10;          status: response.status,&#10;          message: response.body&#10;        }));&#10;&#10;      }&#10;&#10;    });&#10;  };&#10;}&#10;&#10;function delete$resourceSingCap$Update($parentIdentifier$, identifier) {&#10;  return {&#10;    type: DESTROY_$constSing$,&#10;    status: DELETING,&#10;    identifier&#10;  };&#10;}&#10;&#10;function remove$resourceSingCap$($parentIdentifier$, identifier) {&#10;  return {&#10;    type: DESTROY_$constSing$,&#10;    status: SUCCESS,&#10;    identifier&#10;  };&#10;}&#10;&#10;function handleDestroy$resourceSingCap$Failure($parentIdentifier$, identifier, $itemAttr$, error) {&#10;  return {&#10;    type: DESTROY_$constSing$,&#10;    status: DESTROY_FAILURE,&#10;    identifier, $parentIdentifier$, item: {&#10;      $itemAttr$, &#10;      dataStatus: { status: DESTROY_FAILURE },&#10;      error&#10;    }&#10;  };&#10;}&#10;&#10;export {&#10;  fetch$resourcePluralCap$,&#10;  fetch$resourceSingCap$,&#10;&#10;  select$resourceSingCap$,&#10;  selectAnother$resourceSingCap$,&#10;  deselect$resourceSingCap$,&#10;  &#10;  new$resourceSingCap$,&#10;  create$resourceSingCap$,&#10;  edit$resourceSingCap$,&#10;  update$resourceSingCap$,&#10;  destroy$resourceSingCap$&#10;};&#10;" description="redux action creators nested resource" toReformat="false" toShortenFQNames="true">
    <variable name="resourcePluralCap" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="resourcePlural" expression="decapitalize(resourcePluralCap)" defaultValue="" alwaysStopAt="false" />
    <variable name="constPlural" expression="capitalizeAndUnderscore(resourcePlural)" defaultValue="" alwaysStopAt="false" />
    <variable name="resourceSing" expression="resourcePlural" defaultValue="" alwaysStopAt="true" />
    <variable name="resourceSingCap" expression="capitalize(resourceSing)" defaultValue="" alwaysStopAt="false" />
    <variable name="constSing" expression="capitalizeAndUnderscore(resourceSing)" defaultValue="" alwaysStopAt="false" />
    <variable name="parentIdentifier" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="itemAttr" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="identifier" expression="" defaultValue="&quot;id&quot;" alwaysStopAt="true" />
    <variable name="PARENT_ENDPOINT" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="ENDPOINT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rcssi" value="import _ from 'lodash';&#10;import { connect } from 'react-redux';&#10;&#10;import $wrappedComp2$ from './$wrappedComp$';&#10;&#10;function mapStateToProps({ $storeAttr$: { items, selectedIdentifiers } }){&#10;  const selectedIdentifier = _.first(_.keys(selectedIdentifiers));&#10;  &#10;  const $resourceName$ = items[selectedIdentifier] || {};&#10;&#10;  return { ...$resourceName$ };&#10;}&#10;&#10;function mapDispatchToProps(dispatch) {&#10;  return {&#10;    &#10;  };&#10;}&#10;&#10;const $const$ = connect(&#10;    mapStateToProps,&#10;    mapDispatchToProps&#10;)($wrappedComp$);&#10;&#10;module.exports = $const$;&#10;" description="Redux Container for scoped resource indexed by selected identifiers" toReformat="false" toShortenFQNames="true">
    <variable name="wrappedComp" expression="firstWord(spaceSeparated(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="wrappedComp2" expression="wrappedComp" defaultValue="" alwaysStopAt="false" />
    <variable name="storeAttr" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="resourceName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="const" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rcu" value="import { connect } from 'react-redux';&#10;&#10;import { fetch$fetchAction$ } from '../../store/action-creators/$actionCreator$ActionCreators';&#10;&#10;import $wrappedComp2$ from './$wrappedComp$';&#10;&#10;function mapStateToProps({ $storeAttr$ }){&#10;  return {&#10;    ...$storeAttr$&#10;  };&#10;}&#10;&#10;function mapDispatchToProps(dispatch) {&#10;  return {&#10;    fetch$propName$: () =&gt; dispatch(fetch$fetchAction$())&#10;  };&#10;}&#10;&#10;const $const$ = connect(&#10;    mapStateToProps,&#10;    mapDispatchToProps&#10;)($wrappedComp$);&#10;&#10;$const$.fetchData = (dispatch) =&gt; {&#10;  return dispatch(fetch$fetchAction$());&#10;};&#10;&#10;module.exports = $const$;&#10;" description="Redux Container for unscoped resource" toReformat="false" toShortenFQNames="true">
    <variable name="storeAttr" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="actionCreator" expression="capitalize(storeAttr)" defaultValue="" alwaysStopAt="false" />
    <variable name="wrappedComp" expression="firstWord(spaceSeparated(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="wrappedComp2" expression="wrappedComp" defaultValue="" alwaysStopAt="false" />
    <variable name="fetchAction" expression="actionCreator" defaultValue="" alwaysStopAt="false" />
    <variable name="propName" expression="fetchAction" defaultValue="" alwaysStopAt="true" />
    <variable name="const" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rr" value="'use strict';&#10;&#10;import _ from 'lodash';&#10;&#10;import {&#10;  FETCH_$constPlural$,&#10;  FETCH_$constSingular$,&#10;  &#10;  SELECT_$constSingular$,&#10;  SELECT_ANOTHER_$constSingular$,&#10;  DESELECT_$constSingular$,&#10;  &#10;  NEW_$constSingular$,&#10;  CREATE_$constSingular$,&#10;  EDIT_$constSingular$,&#10;  UPDATE_$constSingular$,&#10;  DESTROY_$constSingular$&#10;} from '../actions/$actionsName$Actions';&#10;&#10;import {&#10;  FETCHING, SUCCESS, CREATING, UPDATING, DELETING&#10;} from '../../constants/DataStatuses';&#10;&#10;import { FULL, PREVIEW } from '../../constants/DataFormats';&#10;&#10;const $reducersName$ = ($attrName$ = {}, action = {}) =&gt; {&#10;  const { type } = action;&#10;&#10;  if (type === FETCH_$constPlural$) {&#10;&#10;    return refresh$pluralCap$($attrName$, action);&#10;&#10;  } else if (type === FETCH_$constSingular$) {&#10;&#10;    return refresh$singCap$($attrName$, action);&#10;&#10;  } else if (type === SELECT_$constSingular$) {&#10;&#10;    return select$singCap$($attrName$, action);&#10;&#10;  } else if (type === SELECT_ANOTHER_$constSingular$) {&#10;&#10;    return selectAnother$singCap$($attrName$, action);&#10;&#10;  } else if (type === DESELECT_$constSingular$) {&#10;&#10;    return deselect$singCap$($attrName$, action);&#10;&#10;  } else if (type === NEW_$constSingular$) {&#10;&#10;    return addNew$singCap$($attrName$, action);&#10;&#10;  } else if (type === CREATE_$constSingular$ ) {&#10;&#10;    return mark$singCap$AsCreated($attrName$, action);&#10;&#10;  } else if (type === EDIT_$constSingular$) {&#10;&#10;    return edit$singCap$($attrName$, action);&#10;&#10;  } else if (type === UPDATE_$constSingular$) {&#10;&#10;    return update$singCap$($attrName$, action);&#10;&#10;  } else if (type === DESTROY_$constSingular$) {&#10;&#10;    return remove$singCap$($attrName$, action);&#10;&#10;  } else {&#10;    return $attrName$;&#10;  }&#10;};&#10;&#10;function refresh$pluralCap$($attrName$, { status, items, selectedIdentifiers, indexes, error }) {&#10;&#10;  if (status === FETCHING || status === SUCCESS) {&#10;    return {&#10;      items, indexes, selectedIdentifiers, dataStatus: { status }&#10;    };&#10;&#10;  } else {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      dataStatus: { error, status }&#10;    };&#10;  }&#10;}&#10;&#10;function refresh$singCap$($attrName$, { status, identifier, item, error }) {&#10;&#10;  if (status === FETCHING ) {&#10;    const current$singCap$ = $attrName$.items[identifier] || {};&#10;    &#10;    if (current$singCap$.dataFormat === PREVIEW &amp;&amp; item.dataFormat === FULL) {&#10;&#10;      return {&#10;        ...$attrName$,&#10;        items: {&#10;          ...$attrName$.items,&#10;          [identifier]: {&#10;            ...item,&#10;            $subAttrName$: {&#10;              ...(current$singCap$.$subAttrName$ || {}),&#10;              ...item.$subAttrName$  &#10;            }&#10;          }&#10;        }&#10;      };&#10;      &#10;    } else {&#10;&#10;      return {&#10;        ...$attrName$,&#10;        items: {&#10;          ...$attrName$.items,&#10;          [identifier]: item&#10;        }&#10;      };&#10;      &#10;    }&#10;&#10;  } else if (status === SUCCESS) {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      items: {&#10;        ...$attrName$.items,&#10;        [identifier]: item&#10;      }&#10;    };&#10;&#10;  } else {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      items: {&#10;        ...$attrName$.items,&#10;        [identifier]: {&#10;          ...$attrName$.items[identifier],&#10;          dataStatus: { status, error }&#10;        }&#10;      }&#10;    };&#10;&#10;  }&#10;}&#10;&#10;function select$singCap$($attrName$, { identifier }) {&#10;&#10;  return {&#10;    ...$attrName$,&#10;    selectedIdentifiers: {&#10;      [identifier]: true&#10;    }&#10;  };&#10;}&#10;&#10;function selectAnother$singCap$($attrName$, { identifier }) {&#10;&#10;  const alreadySelected = $attrName$.selectedIdentifiers || {};&#10;  &#10;  return {&#10;    ...$attrName$,&#10;    selectedIdentifiers: {&#10;      ...alreadySelected,&#10;      [identifier]: true&#10;    }&#10;  };&#10;}&#10;&#10;&#10;function deselect$singCap$($attrName$, { identifier }) {&#10;&#10;  return {&#10;    ...$attrName$,&#10;    selectedIdentifiers: _.omit($attrName$.selectedIdentifiers, identifier)&#10;  };&#10;}&#10;&#10;function addNew$singCap$($attrName$, { temporaryId, item }) {&#10;&#10;  return {&#10;    ...$attrName$,&#10;    items: {&#10;      ...($attrName$.items || {}),&#10;      [temporaryId]: item&#10;    },&#10;    &#10;    selectedIdentifiers: {&#10;      [temporaryId]: true&#10;    }&#10;&#10;  };&#10;  &#10;}&#10;&#10;function mark$singCap$AsCreated($attrName$, { status, temporaryId, identifier, item, error }) {&#10;&#10;  if ( status === CREATING) {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      items: {&#10;        ...$attrName$.items,&#10;        [temporaryId]: {&#10;          ...$attrName$.items[temporaryId],&#10;          ...item&#10;        }&#10;      },&#10;      indexes: [&#10;        temporaryId,&#10;        ...$attrName$.indexes&#10;      ]        &#10;&#10;    };&#10;&#10;  } else if ( status === SUCCESS) {&#10;&#10;    const new$singCap$IndexPosition = _.indexOf($attrName$.indexes, temporaryId);&#10;    &#10;    return {&#10;      ...$attrName$,&#10;      items: {&#10;        ..._.omit($attrName$.items, temporaryId),&#10;        [identifier]: {&#10;          ...$attrName$.items[temporaryId],&#10;          ...item&#10;        }&#10;      },&#10;      &#10;      indexes: [&#10;        ..._.slice($attrName$.indexes, 0, new$singCap$IndexPosition),&#10;        identifier,&#10;        ..._.slice($attrName$.indexes, new$singCap$IndexPosition + 1)&#10;      ],&#10;      &#10;      selectedIdentifiers: {&#10;        ..._.omit($attrName$.selectedIdentifiers, temporaryId),&#10;        [identifier]: true&#10;      }&#10;      &#10;&#10;    };&#10;    &#10;  } else {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      items: {&#10;        ...$attrName$.items,&#10;        [temporaryId]: {&#10;          ...$attrName$.items[temporaryId],&#10;          dataStatus: { status, error }&#10;        }&#10;      }&#10;    };&#10;  }&#10;}&#10;&#10;function edit$singCap$($attrName$, { identifier, item } ) {&#10;&#10;  return {&#10;    ...$attrName$,&#10;    items: {&#10;      ...$attrName$.items,&#10;      [identifier]: item&#10;    }&#10;  };&#10;  &#10;}&#10;&#10;function update$singCap$($attrName$, { status, identifier, item, error } ) {&#10;&#10;  if ( status === UPDATING || status === SUCCESS) {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      items: {&#10;        ...$attrName$.items,&#10;        [identifier]: item&#10;      }&#10;    };&#10;&#10;  } else {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      items: {&#10;        ...$attrName$.items,&#10;        [identifier]: {&#10;          ...$attrName$.items[identifier],&#10;          dataStatus: { status, error }&#10;          &#10;        }&#10;      }&#10;    };&#10;  }&#10;}&#10;&#10;function remove$singCap$($attrName$, { status, identifier, item }) {&#10;&#10;  if ( status === DELETING || status === SUCCESS) {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      items: _.omit($attrName$.items, identifier)&#10;    };&#10;&#10;  } else {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      items: {&#10;        ...$attrName$.items,&#10;        [identifier]: item&#10;      }&#10;    };&#10;  }&#10;}&#10;&#10;export default $reducersName$;&#10;" description="redux reducers" toReformat="false" toShortenFQNames="true">
    <variable name="reducersName" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <variable name="pluralCap" expression="reducersName" defaultValue="" alwaysStopAt="true" />
    <variable name="constPlural" expression="capitalizeAndUnderscore(pluralCap)" defaultValue="" alwaysStopAt="false" />
    <variable name="singCap" expression="pluralCap" defaultValue="" alwaysStopAt="true" />
    <variable name="constSingular" expression="capitalizeAndUnderscore(singCap)" defaultValue="" alwaysStopAt="false" />
    <variable name="attrName" expression="decapitalize(pluralCap)" defaultValue="" alwaysStopAt="true" />
    <variable name="actionsName" expression="capitalize(attrName)" defaultValue="" alwaysStopAt="false" />
    <variable name="subAttrName" expression="decapitalize(singCap)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rrnr" value="'use strict';&#10;&#10;import _ from 'lodash';&#10;&#10;import {&#10;  FETCH_$constPlural$,&#10;  FETCH_$constSingular$,&#10;  &#10;  SELECT_$constSingular$,&#10;  SELECT_ANOTHER_$constSingular$,&#10;  DESELECT_$constSingular$,&#10;  &#10;  NEW_$constSingular$,&#10;  CREATE_$constSingular$,&#10;  EDIT_$constSingular$,&#10;  UPDATE_$constSingular$,&#10;  DESTROY_$constSingular$&#10;} from '../actions/$actionsName$Actions';&#10;&#10;import {&#10;  FETCHING, SUCCESS, CREATING, UPDATING, DELETING&#10;} from '../../constants/DataStatuses';&#10;&#10;const $reducersName$ = ($attrName$ = {}, action = {}) =&gt; {&#10;  const { type } = action;&#10;&#10;  if (type === FETCH_$constPlural$) {&#10;&#10;    return refresh$pluralCap$($attrName$, action);&#10;&#10;  } else if (type === FETCH_$constSingular$) {&#10;&#10;    return refresh$singularCap$($attrName$, action);&#10;&#10;  } else if (type === SELECT_$constSingular$) {&#10;&#10;    return select$singularCap$($attrName$, action);&#10;&#10;  } else if (type === SELECT_ANOTHER_$constSingular$) {&#10;&#10;    return selectAnother$singularCap$($attrName$, action);&#10;&#10;  } else if (type === DESELECT_$constSingular$) {&#10;&#10;    return deselect$singularCap$($attrName$, action);&#10;&#10;  } else if (type === NEW_$constSingular$) {&#10;&#10;    return addNew$singularCap$($attrName$, action);&#10;    &#10;  } else if (type === CREATE_$constSingular$) {&#10;&#10;    return mark$singularCap$AsCreated($attrName$, action);&#10;&#10;  } else if (type === EDIT_$constSingular$) {&#10;&#10;    return edit$singularCap$($attrName$, action);&#10;&#10;  } else if (type === UPDATE_$constSingular$) {&#10;&#10;    return update$singularCap$($attrName$, action);&#10;&#10;  } else if (type === DESTROY_$constSingular$) {&#10;&#10;    return remove$singularCap$($attrName$, action);&#10;&#10;  } else {&#10;    return $attrName$;&#10;  }&#10;};&#10;&#10;function refresh$pluralCap$($attrName$, { status, items, selectedIdentifiers, $parentIdentifier$, indexes, error }) {&#10;&#10;  if (status === FETCHING || status === SUCCESS) {&#10;    return {&#10;      ...$attrName$, &#10;      [$parentIdentifier$]: {&#10;        items, indexes, selectedIdentifiers, dataStatus: { status }&#10;      }&#10;    };&#10;&#10;  } else {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      [$parentIdentifier$]: {&#10;        ...$attrName$[$parentIdentifier$],&#10;        dataStatus: { error, status }&#10;      }&#10;    };&#10;  }&#10;}&#10;&#10;function refresh$singularCap$($attrName$, { status, $parentIdentifier$, identifier, item, error }) {&#10;&#10;  if (status === FETCHING) {&#10;&#10;    if (current$singularCap$.dataFormat === PREVIEW &amp;&amp; item.dataFormat === FULL) {&#10;      const current$singularCap$ = $attrName$[$parentIdentifier$].items[identifier] || {};&#10;      &#10;      return {&#10;        ...$attrName$,&#10;        items: {&#10;          ...$attrName$.items,&#10;          [identifier]: {&#10;            ...item,&#10;            $subAttrName$: {&#10;              ...(current$singularCap$.$subAttrName$ || {}),&#10;              ...item.$subAttrName$  &#10;            }&#10;          }&#10;        }&#10;      };&#10;      &#10;      return {&#10;        ...$attrName$,&#10;        [$parentIdentifier$]: {&#10;          ...$attrName$[$parentIdentifier$],&#10;          items: {&#10;            ...$attrName$[$parentIdentifier$].items,&#10;            [identifier]: {&#10;              ...item,&#10;              $subAttrName$: {&#10;                ...(current$singularCap$.$subAttrName$ || {}),&#10;                ...item.$subAttrName$  &#10;              }&#10;            }&#10;          }&#10;        }&#10;      };&#10;      &#10;    } else {&#10;&#10;      return {&#10;        ...$attrName$,&#10;        [$parentIdentifier$]: {&#10;          ...$attrName$[$parentIdentifier$],&#10;          items: {&#10;            ...$attrName$[$parentIdentifier$].items,&#10;            [identifier]: item &#10;          }&#10;        }&#10;      };&#10;      &#10;    }&#10;&#10;  } else if (status === FETCHING ) {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      [$parentIdentifier$]: {&#10;        ...$attrName$[$parentIdentifier$],&#10;        items: {&#10;          ...$attrName$[$parentIdentifier$].items,&#10;          [identifier]: item &#10;        }&#10;      }&#10;    };&#10;&#10;  } else {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      [$parentIdentifier$]: {&#10;        ...$attrName$[$parentIdentifier$],&#10;        items: {&#10;          ...$attrName$[$parentIdentifier$].items,&#10;          [identifier]: {&#10;            ...$attrName$[$parentIdentifier$][identifier],&#10;            dataStatus: { error, status }&#10;          } &#10;        }&#10;      }&#10;    };&#10;    &#10;  }&#10;}&#10;&#10;function select$singularCap$($attrName$, { $parentIdentifier$, identifier }) {&#10;&#10;  return {&#10;    ...$attrName$,&#10;    selectedIdentifiers: {&#10;      [$parentIdentifier$]: {&#10;        [identifier]: true&#10;      }&#10;    }&#10;  };&#10;  &#10;}&#10;&#10;function selectAnother$singularCap$($attrName$, { $parentIdentifier$, identifier }) {&#10;&#10;  const alreadySelected = $attrName$.selectedIdentifiers || {};&#10;  &#10;  const newSelection = function(){&#10;    const parentSelection = alreadySelected[$parentIdentifier$] || {};&#10;    &#10;    return { ...parentSelection, [identifier]: true };    &#10;  }();&#10;  &#10;  return {&#10;    ...$attrName$,&#10;    &#10;    selectedIdentifiers: {&#10;      [$parentIdentifier$]: newSelection&#10;    }&#10;  };&#10;}&#10;&#10;&#10;function deselect$singularCap$($attrName$, { $parentIdentifier$, identifier }) {&#10;&#10;  const alreadySelected = $attrName$.selectedIdentifiers || {};&#10;  const parentSelection = alreadySelected[$parentIdentifier$] || {};&#10;  &#10;  const newParentSelection = _.omit(parentSelection, identifier);&#10;  &#10;  const newSelection = function() {&#10;  &#10;    if ( _.size(newParentSelection) &gt; 0) {&#10;      return _.omit(alreadySelected, $parentIdentifier$);&#10;    } else {&#10;      return {&#10;        ...alreadySelected,&#10;        [$parentIdentifier$]: newParentSelection&#10;      };&#10;    }&#10;  }();&#10;  &#10;  return {&#10;    ...$attrName$,&#10;    &#10;    selectedIdentifiers: {&#10;      [$parentIdentifier$]: newSelection&#10;    }&#10;  };&#10;  &#10;}&#10;&#10;function addNew$singularCap$($attrName$, { $parentIdentifier$, temporaryId, item }) {&#10;&#10;  const existingItems = function(){&#10;    const $singularCap$ = $attrName$[$parentIdentifier$];&#10;&#10;    if ($singularCap$ &amp;&amp; $singularCap$.items) {&#10;      return $singularCap$.items;&#10;    } else {&#10;      return {};&#10;    }&#10;  }();&#10;  &#10;  return {&#10;    ...$attrName$,&#10;    [$parentIdentifier$]: {&#10;      ...$attrName$[$parentIdentifier$],&#10;      items: {&#10;        ...existingItems,&#10;        [temporaryId]: item &#10;      },&#10;      &#10;      selectedIdentifiers: {&#10;        [$parentIdentifier$]: {&#10;          [temporaryId]: true&#10;        }&#10;      }&#10;    }&#10;  };&#10;}&#10;&#10;function mark$singularCap$AsCreated($attrName$, { status, $parentIdentifier$, temporaryId, identifier, item, error }) {&#10;&#10;  if ( status === CREATING ) {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      [$parentIdentifier$]: {&#10;        ...$attrName$[$parentIdentifier$],&#10;        items: {&#10;          ...$attrName$[$parentIdentifier$].items,&#10;          [temporaryId]: {&#10;            ...$attrName$[$parentIdentifier$].items[temporaryId],&#10;            ...item&#10;          } &#10;        },&#10;        &#10;        indexes: [&#10;          temporaryId,&#10;          ...$attrName$[$parentIdentifier$].indexes&#10;        ],&#10;        &#10;        selectedIdentifiers: {&#10;          [$parentIdentifier$]: {&#10;            [identifier]: true&#10;          }&#10;        }&#10;      }&#10;    };&#10;&#10;&#10;  } else if ( status === SUCCESS) {&#10;&#10;    const new$singularCap$IndexPosition = _.indexOf($attrName$[$parentIdentifier$].indexes, temporaryId);&#10;    &#10;    return {&#10;      ...$attrName$,&#10;      [$parentIdentifier$]: {&#10;        ...$attrName$[$parentIdentifier$],&#10;        items: {&#10;          ..._.omit($attrName$[$parentIdentifier$].items, temporaryId),&#10;          [identifier]: {&#10;            ...$attrName$[$parentIdentifier$].items[temporaryId],  &#10;            ...item &#10;          }&#10;        },&#10;        &#10;        indexes: [&#10;          ..._.slice($attrName$[$parentIdentifier$].indexes, 0, new$singularCap$IndexPosition),&#10;          identifier,&#10;          ..._.slice($attrName$[$parentIdentifier$].indexes, new$singularCap$IndexPosition + 1)&#10;        ]&#10;      }&#10;    };&#10;    &#10;  } else {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      [$parentIdentifier$]: {&#10;        ...$attrName$[$parentIdentifier$],&#10;        items: {&#10;          ...$attrName$[$parentIdentifier$].items,&#10;          [temporaryId]: {&#10;            ...$attrName$[$parentIdentifier$][temporaryId],&#10;            dataStatus: { error, status }&#10;          } &#10;        }&#10;      }&#10;    };&#10;    &#10;  }&#10;}&#10;&#10;function edit$singularCap$($attrName$, { $parentIdentifier$, identifier, item } ) {&#10;&#10;  return {&#10;    ...$attrName$,&#10;    [$parentIdentifier$]: {&#10;      ...$attrName$[$parentIdentifier$],&#10;      items: {&#10;        ...$attrName$[$parentIdentifier$].items,&#10;        [identifier]: item &#10;      }&#10;    }&#10;  };&#10;  &#10;}&#10;&#10;function update$singularCap$($attrName$, { status, $parentIdentifier$, identifier, item, error } ) {&#10;&#10;  if ( status === UPDATING || status === SUCCESS) {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      [$parentIdentifier$]: {&#10;        ...$attrName$[$parentIdentifier$],&#10;        items: {&#10;          ...$attrName$[$parentIdentifier$].items,&#10;          [identifier]: item &#10;        }&#10;      }&#10;    };&#10;&#10;  } else {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      [$parentIdentifier$]: {&#10;        ...$attrName$[$parentIdentifier$],&#10;        items: {&#10;          ...$attrName$[$parentIdentifier$].items,&#10;          [identifier]: {&#10;            ...$attrName$[$parentIdentifier$][identifier],&#10;            dataStatus: { error, status }&#10;          } &#10;        }&#10;      }&#10;    };&#10;    &#10;  }&#10;}&#10;&#10;function remove$singularCap$($attrName$, { status, $parentIdentifier$, identifier, item }) {&#10;&#10;  if ( status === DELETING || status === SUCCESS) {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      [$parentIdentifier$]: {&#10;        ...$attrName$[$parentIdentifier$],&#10;        items: {&#10;          ..._.omit($attrName$.items, identifier)&#10;        }&#10;      }&#10;    };&#10;&#10;  } else {&#10;&#10;    return {&#10;      ...$attrName$,&#10;      items: {&#10;        ...$attrName$.items,&#10;        [identifier]: item&#10;      }&#10;    };&#10;    &#10;    return {&#10;      ...$attrName$,&#10;      [$parentIdentifier$]: {&#10;        ...$attrName$[$parentIdentifier$],&#10;        items: {&#10;          ...$attrName$[$parentIdentifier$].items,&#10;          [identifier]: item &#10;        }&#10;      }&#10;    };&#10;  }&#10;}&#10;&#10;export default $reducersName$;&#10;" description="redux reducers nested resource" toReformat="false" toShortenFQNames="true">
    <variable name="reducersName" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <variable name="pluralCap" expression="reducersName" defaultValue="" alwaysStopAt="true" />
    <variable name="constPlural" expression="capitalizeAndUnderscore(pluralCap)" defaultValue="" alwaysStopAt="false" />
    <variable name="singularCap" expression="pluralCap" defaultValue="" alwaysStopAt="true" />
    <variable name="constSingular" expression="capitalizeAndUnderscore(singularCap)" defaultValue="" alwaysStopAt="false" />
    <variable name="attrName" expression="decapitalize(pluralCap)" defaultValue="" alwaysStopAt="true" />
    <variable name="actionsName" expression="capitalize(attrName)" defaultValue="" alwaysStopAt="false" />
    <variable name="parentIdentifier" expression="decapitalize(firstWord(spaceSeparated(reducersName)))" defaultValue="" alwaysStopAt="true" />
    <variable name="subAttrName" expression="decapitalize(singularCap)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ra" value="'use strict';&#10;&#10;module.exports = {&#10;  FETCH_$plural$: 'FETCH_$plural$',&#10;  FETCH_$resource$: 'FETCH_$resource$',&#10;  &#10;  SELECT_$resource$: 'SELECT_$resource$',&#10;  SELECT_ANOTHER_$resource$: 'SELECT_ANOTHER_$resource$',&#10;  DESELECT_$resource$: 'DESELECT_$resource$',&#10;  &#10;  NEW_$resource$: 'NEW_$resource$',&#10;  CREATE_$resource$: 'CREATE_$resource$',&#10;  EDIT_$resource$: 'EDIT_$resource$',&#10;  UPDATE_$resource$: 'UPDATE_$resource$',&#10;  DESTROY_$resource$: 'DESTROY_$resource$'&#10;};&#10;" description="redux actions" toReformat="false" toShortenFQNames="true">
    <variable name="resource" expression="" defaultValue="&quot;Singular resource name&quot;" alwaysStopAt="true" />
    <variable name="plural" expression="resource" defaultValue="&quot;Plural resource name&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rcsuq" value="import { connect } from 'react-redux';&#10;&#10;import { fetch$fetchAction$ } from '../../store/action-creators/$actionCreator$ActionCreators';&#10;import { ABORT } from '../../constants/ResponseActions';&#10;&#10;import $wrappedComp2$ from './$wrappedComp$';&#10;&#10;function mapStateToProps({ $storeAttr$ }, { location: { query: { $urlParam$ }  }){&#10;  const $resourceName$ = $storeAttr$[$urlParam$] || {};&#10;&#10;  return { ...$resourceName$ };&#10;}&#10;&#10;function mapDispatchToProps(dispatch) {&#10;  return {&#10;    fetch$propName$: ($urlParam$) =&gt; dispatch(fetch$fetchAction$($urlParam$))&#10;  };&#10;}&#10;&#10;const $const$ = connect(&#10;    mapStateToProps,&#10;    mapDispatchToProps&#10;)($wrappedComp$);&#10;&#10;$const$.fetchData = (dispatch, { $urlParam$ }) =&gt; {&#10;  return dispatch(fetch$fetchAction$($urlParam$, { throwHttpErrors: { 404: ABORT }}));&#10;};&#10;&#10;module.exports = $const$;&#10;" description="Redux Container for scoped resource indexed by url query" toReformat="false" toShortenFQNames="true">
    <variable name="storeAttr" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="actionCreator" expression="capitalize(storeAttr)" defaultValue="" alwaysStopAt="false" />
    <variable name="wrappedComp" expression="firstWord(spaceSeparated(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="wrappedComp2" expression="wrappedComp" defaultValue="" alwaysStopAt="false" />
    <variable name="urlParam" expression="" defaultValue="&quot;urlSlug&quot;" alwaysStopAt="true" />
    <variable name="resourceName" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="propName" expression="capitalize(resourceName)" defaultValue="" alwaysStopAt="false" />
    <variable name="fetchAction" expression="actionCreator" defaultValue="" alwaysStopAt="false" />
    <variable name="const" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rcsp" value="import { connect } from 'react-redux';&#10;&#10;import { fetch$fetchAction$ } from '../../store/action-creators/$actionCreator$ActionCreators';&#10;&#10;import $wrappedComp2$ from './$wrappedComp$';&#10;&#10;function mapStateToProps({ $storeAttr$ }, { $urlParam$ }){&#10;  const $resourceName$ = $storeAttr$[$urlParam$] || {};&#10;&#10;  return { ...$resourceName$ };&#10;}&#10;&#10;function mapDispatchToProps(dispatch) {&#10;  return {&#10;    fetch$dispatchProp$: ($urlParam$) =&gt; dispatch(fetch$fetchAction$($urlParam$))&#10;  };&#10;}&#10;&#10;const $const$ = connect(&#10;    mapStateToProps,&#10;    mapDispatchToProps&#10;)($wrappedComp$);&#10;&#10;$const$.fetchData = (dispatch, { $urlParam$ }) =&gt; {&#10;  return dispatch(fetch$fetchAction$($urlParam$));&#10;};&#10;&#10;module.exports = $const$;&#10;" description="Redux Container for scoped resource scoped by prop" toReformat="false" toShortenFQNames="true">
    <variable name="wrappedComp" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="wrappedComp2" expression="wrappedComp" defaultValue="" alwaysStopAt="false" />
    <variable name="storeAttr" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="actionCreator" expression="capitalize(storeAttr)" defaultValue="" alwaysStopAt="false" />
    <variable name="fetchAction" expression="capitalize(storeAttr)" defaultValue="" alwaysStopAt="false" />
    <variable name="resourceName" expression="storeAttr" defaultValue="" alwaysStopAt="true" />
    <variable name="dispatchProp" expression="capitalize(resourceName)" defaultValue="" alwaysStopAt="false" />
    <variable name="urlParam" expression="" defaultValue="&quot;urlSlug&quot;" alwaysStopAt="true" />
    <variable name="const" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rcsu" value="import { connect } from 'react-redux';&#10;&#10;import { fetch$fetchAction$ } from '../../store/action-creators/$actionCreator$ActionCreators';&#10;&#10;import $wrappedComp2$ from './$wrappedComp$';&#10;&#10;function mapStateToProps({ $storeAttr$ }, { params: { $urlParam$ } }){&#10;  const $resourceName$ = $storeAttr$[$urlParam$] || {};&#10;&#10;  return { ...$resourceName$ };&#10;}&#10;&#10;function mapDispatchToProps(dispatch) {&#10;  return {&#10;    fetch$dispatchProp$: ($urlParam$) =&gt; dispatch(fetch$fetchAction$($urlParam$))&#10;  };&#10;}&#10;&#10;const $const$ = connect(&#10;    mapStateToProps,&#10;    mapDispatchToProps&#10;)($wrappedComp$);&#10;&#10;$const$.fetchData = (dispatch, { $urlParam$ }) =&gt; {&#10;  return dispatch(fetch$fetchAction$($urlParam$, { throwHttpErrors: { 404: ABORT }} ));&#10;};&#10;&#10;module.exports = $const$;&#10;" description="Redux Container for scoped resource scoped by url param" toReformat="false" toShortenFQNames="true">
    <variable name="wrappedComp" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <variable name="wrappedComp2" expression="wrappedComp" defaultValue="" alwaysStopAt="false" />
    <variable name="storeAttr" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="actionCreator" expression="capitalize(storeAttr)" defaultValue="" alwaysStopAt="false" />
    <variable name="fetchAction" expression="capitalize(storeAttr)" defaultValue="" alwaysStopAt="false" />
    <variable name="resourceName" expression="storeAttr" defaultValue="" alwaysStopAt="true" />
    <variable name="dispatchProp" expression="capitalize(resourceName)" defaultValue="" alwaysStopAt="false" />
    <variable name="urlParam" expression="" defaultValue="&quot;urlSlug&quot;" alwaysStopAt="true" />
    <variable name="const" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="owc" value="optionsWithCredentials(cookie, $SELECTION$)" description="optionsWithCredentials" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_EXPRESSION" value="true" />
    </context>
  </template>
</templateSet>